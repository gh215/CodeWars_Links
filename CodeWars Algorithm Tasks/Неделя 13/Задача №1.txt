## Последовательность решения задачи

**Ссылка:** [Codewars Kata Review](https://www.codewars.com/kata/reviews/5b33dd7286bfaa9e5d000c1d/groups/67e5829fea99b2220d1b71b1)

---

### 1. Полностью понять, что требуется сделать в задаче

**Ответ:** Дана строка, представляющая рыб в аквариуме. Наша задача — симулировать процесс поедания рыб. Мы начинаем как рыба 1-го размера. 
Мы можем съесть любую рыбу, чей размер <= нашему текущему размеру. За каждую съеденную рыбу мы получаем "опыт", равный её размеру. 
Когда наш накопленный опыт достигает или превышает порог для следующего уровня (текущий размер * 4), наш размер увеличивается на 1, опыт уменьшается на использованный порог, 
и порог для следующего уровня пересчитывается. Этот процесс (поедание -> проверка уровня -> повышение) повторяется, пока мы можем повышать свой размер.

Наша задача — написать функцию, которая принимает строку с рыбами и возвращает конечный размер нашей рыбы после того, как она съела всех возможных рыб и больше не может повышать свой размер.

*   Пример: "shoal = "1111"" (4 рыбы 1-го размера).
    *   Начальный размер = 1. Порог = "1 * 4 = 4".
    *   Едим 4 рыбы 1-го размера. Опыт = "4 * 1 = 4".
    *   Опыт (4) >= Порог (4). Повышаем размер.
    *   Новый размер = 2. Опыт = "4 - 4 = 0". Новый порог = "2 * 4 = 8".
    *   Больше рыб нет. Конечный размер = 2.
*   Пример: 'shoal = "11112222"'
    *   Начальный размер = 1. Порог = 4.
    *   Едим 4 рыбы 1-го размера. Опыт = 4.
    *   Опыт >= Порог. Повышаем размер.
    *   Новый размер = 2. Опыт = 0. Новый порог = 8.
    *   Теперь можем есть рыб 1-го и 2-го размера. Рыб 1-го уже нет.
    *   Едим 4 рыбы 2-го размера. Опыт += '4 * 2 = 8'.
    *   Опыт (8) >= Порог (8). Повышаем размер.
    *   Новый размер = 3. Опыт = '8 - 8 = 0'. Новый порог = "3 * 4 = 12".
    *   Больше рыб нет. Конечный размер = 3.

---

### 2. Разбить задачу на подзадачи

**Ответ:**
1.  Подсчитать исходное количество рыб каждого размера в аквариумe.
2.  Реализовать процесс поедания: съесть всех доступных рыб, обновить их количество и накопить полученный опыт.
3.  Реализовать процесс повышения уровня: проверить, достаточно ли опыта для повышения размера. Если да, увеличить размер, вычесть опыт, пересчитать порог для следующего уровня. Повторять, пока хватает опыта.
4.  Объединить шаги 2 и 3 в цикл: повторять поедание и попытки повышения уровня до тех пор, пока за один цикл не удается повысить уровень.
5.  Вернуть конечный размер рыбы.

---

### 3. Написать псевдокод (функции, осн. переменные, прим. последовательность действий)

**Ответ:**

```cpp
#include <vector>
#include <string>

std::vector<size_t> fishCounts(std::string shoal)
{
  if (shoal.empty()) return {1};

  std::vector<size_t> counts(10, 0); 
  for (char c : shoal) 
  {
      int size = c - '0';
      if (size >= 1 && size <= 9) counts[size]++;      
  }

  return counts;
}

size_t eatFishes(size_t currentSize, std::vector<size_t>& counts) 
{
    size_t gainedExperience = 0;

    for (size_t fishSizeToEat = 1; fishSizeToEat <= currentSize; ++fishSizeToEat) 
    {
        if (fishSizeToEat < counts.size() && counts[fishSizeToEat] > 0) 
        { 
            gainedExperience += counts[fishSizeToEat] * fishSizeToEat;
            counts[fishSizeToEat] = 0;
        }
    }
    return gainedExperience;
}


bool checkAndLevelUp(size_t& currentSize, size_t& currentExperience, size_t& experienceNeeded) 
{
    bool leveledUp = false;
    while (currentExperience >= experienceNeeded) 
    {
        currentExperience -= experienceNeeded; 
        currentSize++;                       
        experienceNeeded = currentSize * 4; 
        leveledUp = true;                   
    }
    return leveledUp; 
}

int fish(std::string shoal) 
{
    std::vector<size_t> counts = fishCounts(shoal);
  
    size_t currentSize = 1;
    size_t currentExperience = 0;
    size_t experienceNeededIncrement = 4;

    while (true) 
    {
        size_t gainedThisCycle = eatFishes(currentSize, counts);

        currentExperience += gainedThisCycle;

        bool didLevelUp = checkAndLevelUp(currentSize, currentExperience, experienceNeededIncrement);

        if (!didLevelUp) break;
    }

    return currentSize;
}

```
---

### 4. Реализовать функции

*   4.1. **Что должна делать функция?**
*   4.2. **Какие данные требуются?**
*   4.3. **Какие варианты входных данных могут быть?**
*   4.4. **Реализация тела функции.**
*   4.5. **Проверка и тестирование функции.**

**Ответ:**

**А) Функция 'fishCounts':**
*   4.1. Подсчитывает количество рыб каждого размера в переданной строке 'shoal'.
*   4.2. Строка 'std::string shoal', содержащая символы-цифры от '0' до '9'.
*   4.3. Пустая строка, строка с цифрами, строка с другими символами (должны игнорироваться), строка только с '0'.
*   4.4. **Сделано.** 
*   4.5. **Протестировано.** 

**Б) Функция 'eatFishes':**
*   4.1. Симулирует поедание рыб, размер которых меньше или равен 'currentSize'. Обнуляет счетчики съеденных рыб в векторе 'counts' и возвращает суммарный опыт.
*   4.2. Текущий размер рыбы и вектор 'std::vector<size_t>& counts' с количеством рыб каждого размера.
*   4.3. 'currentSize' >= 1. Вектор 'counts' с неотрицательными значениями.
*   4.4. **Сделано.** 
*   4.5. **Протестировано.** 

**В) Функция 'checkAndLevelUp':**
*   4.1. Проверяет, достаточно ли накопленного опыта для повышения размера, учитывая порог. Если да, увеличивает размер, вычитает опыт, пересчитывает порог и повторяет проверку. 
Возвращает 'true', если размер был увеличен хотя бы раз, иначе 'false'.
*   4.2. Текущий размер, текущий опыт, порог опыта для следующего уровня. Все передаются по ссылке.
*   4.3. 'currentSize' >= 1. 'currentExperience' >= 0. 'experienceNeeded' > 0.
*   4.4. **Сделано.** 
*   4.5. **Протестировано.** 
---

### 5. Написание кода основной функции ('fish')

**Ответ:** **Сделано. Протестировано.** 

---

### 6. Тестирование всей функции ('fish')

**Ответ:** **Сделано. Протестировано.**

---